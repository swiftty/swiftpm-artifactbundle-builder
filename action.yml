name: 'artifactbundle-builder'
description: 'generate artifactbundle binaries'
inputs:
  swift-version:
    description: 'swift version'
    required: true
  depth:
    description: 'find executable targets'
    default: '0'
  path:
    description: 'custom working directory'
    default: '.'
  configuration:
    description: 'swift build configuration'
    default: 'release'
  skip-swift-setup:
    description: 'use runs-on default swift environment'
    default: 'false'
  macos-archs:
    description: 'archs list. e.g.) x86_64 arm64'
    default: 'x86_64 arm64'
runs:
  using: 'composite'
  steps:
    - if: ${{ inputs.skip-swift-setup != 'true' }}
      uses: swift-actions/setup-swift@v1
      with:
        swift-version: ${{ inputs.swift-version }}
    - name: Get swift version
      shell: bash
      run: swift --version
    - uses: actions/cache@v3
      with:
        path: .build
        key: swiftpm-${{ runner.os }}-${{ inputs.swift-version }}-${{ hashFiles(format('{0}/Package.swift', inputs.path)) }}
        restore-keys: |
          swiftpm-${{ runner.os }}-${{ inputs.swift-version }}-
          swiftpm-${{ runner.os }}-
    - name: Build bin
      shell: bash
      run: |
        cd ${{ inputs.path }}

        BUILD_OPTS="-c ${{ inputs.configuration }}"
        if [ "${{ runner.os }}" = "macOS" ]; then
          ARCHS=$(echo "${{ inputs.macos-archs }}" | jq -Rnc 'inputs | split(" ") | map("--arch " + .)' | jq -rc 'join(" ")')
          BUILD_OPTS="$BUILD_OPTS $ARCHS"
        fi

        ROOT_PRODUCTS=$(swift package dump-package | jq -r '.products[] | select(.type | has("executable")) | .name')
        for PRODUCT in $ROOT_PRODUCTS; do
          swift build $BUILD_OPTS --product $PRODUCT
        done

        # currently limitation depth == 1
        if [ "${{ inputs.depth }}" != "0" ]; then
          NAMES=$(swift package show-dependencies --format json | jq -r '.dependencies[].name')
          for NAME in $NAMES; do
            DIR=.build/checkouts/$NAME
            PRODUCTS=$(swift package --package-path $DIR dump-package | jq -r '.products[] | select(.type | has("executable")) | .name')
            for PRODUCT in $PRODUCTS; do
              swift build $BUILD_OPTS --product $PRODUCT
            done
          done
        fi
    - name: Collect bins
      shell: bash
      run: |
        cd ${{ inputs.path }}

        BUILD_OPTS="-c ${{ inputs.configuration }}"
        _TRIPLE=$(swift -print-target-info | jq -r '.target.moduleTriple')
        if [ "${{ runner.os }}" = "macOS" ]; then
          ARCHS=$(echo "${{ inputs.macos-archs }}" | jq -Rnc 'inputs | split(" ") | map("--arch " + .)' | jq -rc 'join(" ")')
          BUILD_OPTS="$BUILD_OPTS $ARCHS"

          TRIPLES=$(echo "${{ inputs.macos-archs }}" | jq -Rnc 'inputs | split(" ") | map(. + "-apple-macosx")')

          BUNDLE_EXT="bundle"
        else
          TRIPLES="[ \"$_TRIPLE\" ]"

          BUNDLE_EXT="resources"
        fi

        BUILD_DIR=$(swift build $BUILD_OPTS --show-bin-path)
        OUTPUT_PATH=output/${{ inputs.swift-version }}/$_TRIPLE

        mkdir -p $OUTPUT_PATH/bin

        # copy executable
        find $BUILD_DIR -maxdepth 1 -type f -exec test -x {} \; -print | xargs -I '{}' mv {} $OUTPUT_PATH/bin

        for BIN in `ls $OUTPUT_PATH/bin`; do
          JSON=$(cat << EOS
        {
          "path": "$_TRIPLE/bin/$BIN",
          "supportedTriples": $TRIPLES
        }
        EOS
        )
          echo $JSON > $OUTPUT_PATH/$BIN.json
        done

        # add bundle
        find $BUILD_DIR -maxdepth 1 -name "*.$BUNDLE_EXT" -print | xargs -I '{}' mv {} $OUTPUT_PATH/bin

        # exclude test bundles
        rm -rf $OUTPUT_PATH/bin/*Tests.$BUNDLE_EXT

        # archive
        tar -cvzf output.tar.gz $OUTPUT_PATH
    - uses: actions/upload-artifact@v3
      with:
        name: artifact-${{ inputs.swift-version }}-${{ runner.os }}.tar.gz
        path: ${{ inputs.path }}/output.tar.gz
        retention-days: 1